{"version":3,"sources":["BumbleBeeBasicApp.js","serviceWorker.js","index.js"],"names":["bumblebee","BumbleBee","setSensitivity","setWorkersPath","addHotword","require","setHotword","BumbleBeeBasicApp","state","words","started","sound","Audio","on","hotword","play","push","setState","this","start","stop","className","onClick","e","renderStarted","map","word","i","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAIMA,EAAY,I,OAAIC,GAEtBD,EAAUE,eAAe,IAEzBF,EAAUG,eAAe,uBAEzBH,EAAUI,WAAW,YAAaC,EAAQ,KAE1CL,EAAUM,WAAW,a,IAgENC,E,YA7Dd,aAAe,IAAD,uBACb,+CAEKC,MAAQ,CACZC,MAAO,GACPC,SAAS,GAGV,IAAMC,EAAQ,IAAIC,MAAM,2BARX,OAUbZ,EAAUa,GAAG,WAAW,SAACC,GACxBH,EAAMI,OAD8B,IAE7BN,EAAS,EAAKD,MAAdC,MACPA,EAAMO,KAAKF,GACX,EAAKG,SAAS,CAACR,aAdH,E,qEAmBbS,KAAKD,SAAS,CACbP,SAAS,IAGVV,EAAUmB,U,6BAIVD,KAAKD,SAAS,CACbP,SAAS,EACTD,MAAO,KAGRT,EAAUoB,S,+BAGD,IAAD,OACR,OACC,yBAAKC,UAAU,OAEd,4BAAQC,QAAS,SAAAC,GAAO,EAAKJ,UAA7B,SACA,4BAAQG,QAAS,SAAAC,GAAO,EAAKH,SAA7B,QAEEF,KAAKM,mB,sCAOT,GAAIN,KAAKV,MAAME,QAAS,OAAQ,6BAC/B,gDAEA,4BACEQ,KAAKV,MAAMC,MAAMgB,KAAI,SAACC,EAAMC,GAC5B,OAAQ,wBAAIC,IAAKD,GAAID,Y,GAvDMG,aCFZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAuBC,SAASC,eAAe,SD2HzD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.833f4c0b.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport BumbleBee from 'bumblebee-hotword';\n\nconst bumblebee = new BumbleBee();\n\nbumblebee.setSensitivity(0.5);\n\nbumblebee.setWorkersPath('./bumblebee-workers');\n\nbumblebee.addHotword('bumblebee', require('bumblebee-hotword/hotwords/bumblebee'));\n\nbumblebee.setHotword('bumblebee');\n\nclass BumbleBeeBasicApp extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\t\n\t\tthis.state = {\n\t\t\twords: [],\n\t\t\tstarted: false\n\t\t};\n\t\t\n\t\tconst sound = new Audio('sounds/bumblebee-on.mp3');\n\t\t\n\t\tbumblebee.on('hotword', (hotword) => {\n\t\t\tsound.play();\n\t\t\tconst {words} = this.state;\n\t\t\twords.push(hotword);\n\t\t\tthis.setState({words});\n\t\t});\n\t}\n\t\n\tstart() {\n\t\tthis.setState({\n\t\t\tstarted: true\n\t\t});\n\t\t\n\t\tbumblebee.start();\n\t}\n\t\n\tstop() {\n\t\tthis.setState({\n\t\t\tstarted: false,\n\t\t\twords: []\n\t\t});\n\t\t\n\t\tbumblebee.stop();\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t\n\t\t\t\t<button onClick={e => { this.start() }}>Start</button>\n\t\t\t\t<button onClick={e => { this.stop() }}>Stop</button>\n\t\t\t\t\n\t\t\t\t{ this.renderStarted() }\n\t\t\t\n\t\t\t</div>\n\t\t);\n\t}\n\t\n\trenderStarted() {\n\t\tif (this.state.started) return (<div>\n\t\t\t<h3>Say \"bumblebee\":</h3>\n\t\t\t\n\t\t\t<ul>\n\t\t\t\t{this.state.words.map((word, i) => {\n\t\t\t\t\treturn (<li key={i}>{word}</li>);\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t</div>);\n\t}\n}\n\nexport default BumbleBeeBasicApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BumbleBeeBasicApp from './BumbleBeeBasicApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BumbleBeeBasicApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}