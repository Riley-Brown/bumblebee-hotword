{"version":3,"sources":["../../../lib/porcupine_manager.js","../../../lib/web-voice-processor.js","../../../hotwords/bumblebee.js","BumbleBeeBasicApp.js","serviceWorker.js","index.js","../../../lib/bumblebee.js"],"names":["module","exports","webVoiceProcessor","porcupineWorkerScript","downsamplingScript","porcupineWorker","start","keywordIDs","sensitivities","detectionCallback","errorCallback","audioProcessCallback","Worker","postMessage","command","onmessage","e","data","keyword","this","processFrame","frame","inputFrame","stop","downsampler","isRecording","engines","downsamplerScript","navigator","mediaDevices","getUserMedia","audio","then","stream","audioContext","window","AudioContext","webkitAudioContext","audioSource","createMediaStreamSource","node","createScriptProcessor","onaudioprocess","inputBuffer","getChannelData","connect","destination","inputSampleRate","context","sampleRate","forEach","engine","catch","Uint8Array","bumblebee","BumbleBee","setSensitivity","setWorkersPath","addHotword","require","setHotword","BumbleBeeBasicApp","state","words","started","sound","Audio","on","hotword","play","push","setState","className","onClick","renderStarted","map","word","i","key","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","EventEmitter","PorcupineManager","hotwords","setVoiceProcessor","_detectionCallback","bind","_errorCallback","_audioProcessCallback","proc","name","sensitivity","defaultSensitivity","w","Object","keys","indexOf","Error","s","porcupineManager","path","webWorkersPath","console","log","emit","id","h","Float32Array"],"mappings":"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","file":"static/js/main.8d4cf2bb.chunk.js","sourcesContent":["const PorcupineManager = (function (webVoiceProcessor, porcupineWorkerScript, downsamplingScript) {\n\tlet porcupineWorker;\n\t\n\tlet start = function (keywordIDs, sensitivities, detectionCallback, errorCallback, audioProcessCallback) {\n\t\tporcupineWorker = new Worker(porcupineWorkerScript);\n\t\tporcupineWorker.postMessage({\n\t\t\tcommand: \"init\",\n\t\t\tkeywordIDs: keywordIDs,\n\t\t\tsensitivities: sensitivities\n\t\t});\n\t\t\n\t\tporcupineWorker.onmessage = function (e) {\n\t\t\tdetectionCallback(e.data.keyword);\n\t\t};\n\t\t\n\t\twebVoiceProcessor.start([this], downsamplingScript, errorCallback, audioProcessCallback);\n\t};\n\t\n\tlet stop = function () {\n\t\twebVoiceProcessor.stop();\n\t\tporcupineWorker.postMessage({command: \"release\"});\n\t};\n\t\n\tlet processFrame = function (frame) {\n\t\tporcupineWorker.postMessage({command: \"process\", inputFrame: frame});\n\t};\n\t\n\treturn {start: start, processFrame: processFrame, stop: stop};\n});\n\nmodule.exports = PorcupineManager;","let downsampler;\n\nlet isRecording = false;\n\nlet start = function (engines, downsamplerScript, errorCallback, audioProcessCallback) {\n\tif (!downsampler) {\n\t\tnavigator.mediaDevices.getUserMedia({audio: true})\n\t\t.then(stream => {\n\t\t\tlet audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\tlet audioSource = audioContext.createMediaStreamSource(stream);\n\t\t\tlet node = audioContext.createScriptProcessor(4096, 1, 1);\n\t\t\tnode.onaudioprocess = function (e) {\n\t\t\t\tif (!isRecording) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdownsampler.postMessage({command: \"process\", inputFrame: e.inputBuffer.getChannelData(0)});\n\t\t\t};\n\t\t\taudioSource.connect(node);\n\t\t\tnode.connect(audioContext.destination);\n\t\t\t\n\t\t\tdownsampler = new Worker(downsamplerScript);\n\t\t\tdownsampler.postMessage({command: \"init\", inputSampleRate: audioSource.context.sampleRate});\n\t\t\tdownsampler.onmessage = function (e) {\n\t\t\t\tengines.forEach(function (engine) {\n\t\t\t\t\tengine.processFrame(e.data);\n\t\t\t\t});\n\t\t\t\tif (audioProcessCallback) {\n\t\t\t\t\taudioProcessCallback(e.data);\n\t\t\t\t}\n\t\t\t};\n\t\t})\n\t\t.catch(errorCallback);\n\t}\n\t\n\tisRecording = true;\n};\n\nlet stop = function () {\n\tisRecording = false;\n\tdownsampler.postMessage({command: \"reset\"});\n};\n\nmodule.exports = {start: start, stop: stop};\n","module.exports = new Uint8Array([\n  0x8c, 0x14, 0x8b, 0x6f, 0x4b, 0xe9, 0x6a, 0x89, 0x90, 0xe1, 0xc0, 0x85,\n  0xee, 0x60, 0xee, 0x5c, 0xee, 0x4d, 0x7c, 0x3a, 0xd7, 0x15, 0xaf, 0x31,\n  0x7f, 0x4a, 0x34, 0xd5, 0x6a, 0x6f, 0xec, 0xe3, 0x0f, 0x74, 0xa8, 0x31,\n  0x19, 0xf7, 0x46, 0xb7, 0xb8, 0x3f, 0xa6, 0x37, 0x71, 0x3b, 0x14, 0xf2,\n  0xdc, 0xa5, 0x3d, 0x8b, 0x06, 0x84, 0xdb, 0x91, 0x47, 0xba, 0x49, 0x6c,\n  0xcc, 0x72, 0x51, 0x14, 0xad, 0x35, 0xe9, 0x51, 0x27, 0x70, 0x9a, 0x4a,\n  0x7c, 0x26, 0x34, 0x2c, 0x67, 0x50, 0xab, 0x40, 0xf6, 0xdb, 0xc4, 0x95,\n  0xfa, 0x56, 0xc7, 0x12, 0x55, 0xc4, 0x2e, 0x94\n]);","import React, {Component} from 'react';\n\nimport BumbleBee from 'bumblebee-hotword';\n\nconst bumblebee = new BumbleBee();\n\nbumblebee.setSensitivity(0.5);\n\nbumblebee.setWorkersPath('./bumblebee-workers');\n\nbumblebee.addHotword('bumblebee', require('bumblebee-hotword/hotwords/bumblebee'));\n\nbumblebee.setHotword('bumblebee');\n\nclass BumbleBeeBasicApp extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\t\n\t\tthis.state = {\n\t\t\twords: [],\n\t\t\tstarted: false\n\t\t};\n\t\t\n\t\tconst sound = new Audio('sounds/bumblebee.mp3');\n\t\t\n\t\tbumblebee.on('hotword', (hotword) => {\n\t\t\tsound.play();\n\t\t\tconst {words} = this.state;\n\t\t\twords.push(hotword);\n\t\t\tthis.setState({words});\n\t\t});\n\t}\n\t\n\tstart() {\n\t\tthis.setState({\n\t\t\tstarted: true\n\t\t});\n\t\t\n\t\tbumblebee.start();\n\t}\n\t\n\tstop() {\n\t\tthis.setState({\n\t\t\tstarted: false,\n\t\t\twords: []\n\t\t});\n\t\t\n\t\tbumblebee.stop();\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t\n\t\t\t\t<button onClick={e => { this.start() }}>Start</button>\n\t\t\t\t<button onClick={e => { this.stop() }}>Stop</button>\n\t\t\t\t\n\t\t\t\t{ this.renderStarted() }\n\t\t\t\n\t\t\t</div>\n\t\t);\n\t}\n\t\n\trenderStarted() {\n\t\tif (this.state.started) return (<div>\n\t\t\t<h3>Say \"bumblebee\":</h3>\n\t\t\t\n\t\t\t<ul>\n\t\t\t\t{this.state.words.map((word, i) => {\n\t\t\t\t\treturn (<li key={i}>{word}</li>);\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t</div>);\n\t}\n}\n\nexport default BumbleBeeBasicApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BumbleBeeBasicApp from './BumbleBeeBasicApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BumbleBeeBasicApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const EventEmitter = require('events');\nconst PorcupineManager = require('./porcupine_manager');\nconst webVoiceProcessor = require('./web-voice-processor');\n\nclass BumbleBee extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.hotword = null;\n\t\tthis.hotwords = {};\n\t\tthis.setSensitivity(0.5);\n\t\tthis.setWorkersPath('/');\n\t\tthis.setVoiceProcessor(webVoiceProcessor);\n\t\tthis._detectionCallback = this.detectionCallback.bind(this);\n\t\tthis._errorCallback = this.errorCallback.bind(this);\n\t\tthis._audioProcessCallback = this.audioProcessCallback.bind(this);\n\t}\n\t\n\tsetVoiceProcessor(proc) {\n\t\tthis.webVoiceProcessor = proc;\n\t}\n\t\n\taddHotword(name, data, sensitivity) {\n\t\tthis.hotwords[name] = {\n\t\t\tdata,\n\t\t\tsensitivity: sensitivity || this.defaultSensitivity\n\t\t};\n\t}\n\t\n\tsetHotword(w) {\n\t\tif (w === null || w === '') {\n\t\t\tthis.hotword = null;\n\t\t}\n\t\telse if (Object.keys(this.hotwords).indexOf(w) > -1) {\n\t\t\tthis.hotword = w;\n\t\t}\n\t\telse {\n\t\t\tthrow new Error('invalid hotword');\n\t\t}\n\t}\n\t\n\tsetSensitivity(s) {\n\t\tthis.defaultSensitivity = s;\n\t}\n\t\n\tstop() {\n\t\tthis.porcupineManager.stop();\n\t\tthis.started = false;\n\t}\n\t\n\tsetWorkersPath(path) {\n\t\tthis.webWorkersPath = path;\n\t}\n\t\n\tdetectionCallback(keyword) {\n\t\tif (keyword) {\n\t\t\tconsole.log('bumblebee keyword', keyword);\n\t\t\tif (this.hotword === null || keyword === this.hotword) {\n\t\t\t\tthis.emit('hotword', keyword);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log('wrong hotword:', keyword);\n\t\t\t}\n\t\t}\n\t}\n\t\n\terrorCallback(e) {\n\t\tthis.emit('error', e);\n\t}\n\t\n\taudioProcessCallback(data) {\n\t\tthis.emit('data', data);\n\t}\n\t\n\tstart() {\n\t\tif (this.started) return;\n\t\tthis.started = true;\n\t\tthis.porcupineManager = PorcupineManager(\n\t\t\tthis.webVoiceProcessor,\n\t\t\tthis.webWorkersPath+\"/porcupine_worker.js\",\n\t\t\tthis.webWorkersPath+\"/downsampling_worker.js\");\n\t\t\n\t\tlet keywordIDs = {};\n\t\tlet sensitivities = [];\n\t\tfor (let id in this.hotwords) {\n\t\t\tlet h = this.hotwords[id];\n\t\t\tkeywordIDs[id] = h.data;\n\t\t\tsensitivities.push(h.sensitivity);\n\t\t}\n\t\t\n\t\tthis.porcupineManager.start(keywordIDs, new Float32Array(sensitivities), this._detectionCallback, this._errorCallback, this._audioProcessCallback);\n\t}\n}\n\nmodule.exports = BumbleBee;"],"sourceRoot":""}